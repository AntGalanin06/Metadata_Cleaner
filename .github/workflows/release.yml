name: üöÄ Release Build & Deploy

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-windows:
    name: ü™ü Windows Installer
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Set UTF-8 encoding for Windows
      run: |
        echo "PYTHONIOENCODING=utf-8" >> $env:GITHUB_ENV
        echo "LANG=en_US.UTF-8" >> $env:GITHUB_ENV
        chcp 65001
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install
    
    - name: Build Windows app with FFmpeg
      run: |
        poetry run python build.py
    
    - name: Install NSIS
      run: |
        choco install nsis -y
    
    - name: Create Windows Installer
      run: |
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É dist
        Write-Host "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ dist:"
        Get-ChildItem dist
        
        if (Test-Path "dist\MetadataCleaner") {
          Write-Host "–ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ MetadataCleaner"
        } elseif (Test-Path "dist\MetadataCleaner.exe") {
          Write-Host "–ù–∞–π–¥–µ–Ω –æ–¥–∏–Ω–æ—á–Ω—ã–π –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª, —Å–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É..."
          New-Item -ItemType Directory -Path "dist\MetadataCleaner" -Force
          Copy-Item "dist\MetadataCleaner.exe" -Destination "dist\MetadataCleaner\MetadataCleaner.exe"
          Write-Host "–§–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ dist\MetadataCleaner\"
        } else {
          Write-Host "–ü–∞–ø–∫–∞ MetadataCleaner –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã..."
          $distItems = Get-ChildItem dist -Directory
          if ($distItems.Count -gt 0) {
            $firstDir = $distItems[0].Name
            Write-Host "–°–æ–∑–¥–∞–µ–º —Å–∏–º–ª–∏–Ω–∫ –¥–ª—è $firstDir"
            New-Item -ItemType SymbolicLink -Path "dist\MetadataCleaner" -Target "dist\$firstDir"
          } else {
            Write-Host "–°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –∏ –∫–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã..."
            New-Item -ItemType Directory -Path "dist\MetadataCleaner" -Force
            Get-ChildItem dist -File | Copy-Item -Destination "dist\MetadataCleaner\"
          }
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        Write-Host "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ dist\MetadataCleaner:"
        Get-ChildItem "dist\MetadataCleaner"
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —è–∑—ã–∫–∞
        makensis installer_windows.nsi
      shell: pwsh
    
    - name: Upload Windows Installer
      uses: actions/upload-artifact@v4
      with:
        name: windows-installer
        path: MetadataCleaner-Windows.exe

  build-macos:
    name: üçé macOS DMG
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Set UTF-8 encoding for macOS
      run: |
        echo "PYTHONIOENCODING=utf-8" >> $GITHUB_ENV
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install
    
    - name: Install create-dmg
      run: brew install create-dmg
    
    - name: Build macOS app and DMG
      run: |
        poetry run python build.py
    
    - name: Upload macOS DMG
      uses: actions/upload-artifact@v4
      with:
        name: macos-dmg
        path: MetadataCleaner-macOS.dmg

  build-linux:
    name: üêß Linux AppImage
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y fuse libfuse2
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install
    
    - name: Build Linux app with FFmpeg
      run: |
        poetry run python build.py
    
    - name: Create AppImage
      run: |
        # –°–∫–∞—á–∏–≤–∞–µ–º linuxdeploy
        wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
        chmod +x linuxdeploy-x86_64.AppImage
        
        # –°–æ–∑–¥–∞–µ–º AppDir —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        mkdir -p AppDir/usr/bin
        mkdir -p AppDir/usr/share/applications
        mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
        
        # –ö–æ–ø–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç—å)
        if [ -d "dist/MetadataCleaner" ]; then
          cp -r dist/MetadataCleaner/* AppDir/usr/bin/
        elif [ -d "dist/run" ]; then
          cp -r dist/run/* AppDir/usr/bin/
        else
          echo "–ò—â–µ–º –ø–∞–ø–∫—É dist..."
          ls -la dist/
          cp -r dist/*/* AppDir/usr/bin/ 2>/dev/null || cp -r dist/* AppDir/usr/bin/
        fi
        # –ù–∞—Ö–æ–¥–∏–º –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª
        if [ -f "AppDir/usr/bin/MetadataCleaner" ]; then
          chmod +x AppDir/usr/bin/MetadataCleaner
        elif [ -f "AppDir/usr/bin/run" ]; then
          chmod +x AppDir/usr/bin/run
          mv AppDir/usr/bin/run AppDir/usr/bin/MetadataCleaner
        else
          echo "–ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞..."
          find AppDir/usr/bin -type f -executable
          # –ù–∞–π–¥–µ–º –ø–µ—Ä–≤—ã–π –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –∏ –ø–µ—Ä–µ–∏–º–µ–Ω—É–µ–º
          exec_file=$(find AppDir/usr/bin -type f -executable | head -1)
          if [ -n "$exec_file" ]; then
            mv "$exec_file" AppDir/usr/bin/MetadataCleaner
            chmod +x AppDir/usr/bin/MetadataCleaner
          fi
        fi
        
        # –°–æ–∑–¥–∞–µ–º desktop —Ñ–∞–π–ª
        cat > AppDir/usr/share/applications/metadata-cleaner.desktop << EOF
        [Desktop Entry]
        Type=Application
        Name=Metadata Cleaner
        Comment=Clean metadata from files
        Exec=MetadataCleaner
        Icon=metadata-cleaner
        Categories=Utility;
        EOF
        
        # –ö–æ–ø–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫—É
        cp assets/icons/icon.png AppDir/usr/share/icons/hicolor/256x256/apps/metadata-cleaner.png
        
        # –ö–æ–ø–∏—Ä—É–µ–º –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é
        cp docs/LICENSE_INSTALLER.txt AppDir/LICENSE_INSTALLER.txt
        
        # –°–æ–∑–¥–∞–µ–º AppImage
        ./linuxdeploy-x86_64.AppImage --appdir AppDir --output appimage
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º (–∏—â–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª)
        mv *.AppImage MetadataCleaner-Linux.AppImage 2>/dev/null || true
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, —Å–æ–∑–¥–∞–µ–º –≤—Ä—É—á–Ω—É—é
        if [ ! -f "MetadataCleaner-Linux.AppImage" ]; then
          echo "–ü–æ–∏—Å–∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ AppImage..."
          ls -la *.AppImage || true
          # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
          for file in *.AppImage; do
            if [ -f "$file" ]; then
              mv "$file" MetadataCleaner-Linux.AppImage
              break
            fi
          done
        fi
    
    - name: Upload Linux AppImage
      uses: actions/upload-artifact@v4
      with:
        name: linux-appimage
        path: MetadataCleaner-Linux.AppImage
    
    - name: Upload Linux Installer
      uses: actions/upload-artifact@v4
      with:
        name: linux-installer
        path: installer_linux.sh

  release:
    name: üì¶ Create Release
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Create Release Notes
      run: |
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π —à–∞–±–ª–æ–Ω —Ä–µ–ª–∏–∑–∞
        sed "s/{VERSION}/${GITHUB_REF#refs/tags/}/g" docs/RELEASE_TEMPLATE.md > RELEASE_NOTES.md
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          windows-installer/MetadataCleaner-Windows.exe
          macos-dmg/MetadataCleaner-macOS.dmg
          linux-appimage/MetadataCleaner-Linux.AppImage
          linux-installer/installer_linux.sh
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: üì¢ Notify Success
    needs: [release]
    runs-on: ubuntu-latest
    if: success()
    
    steps:
    - name: Success Notification
      run: |
        echo "üéâ Release ${GITHUB_REF#refs/tags/} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!"
        echo "üì¶ –í—Å–µ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∏ —Å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
        echo "üîó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: https://github.com/${{ github.repository }}/releases" 