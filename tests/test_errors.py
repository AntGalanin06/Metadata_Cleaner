"""–¢–µ—Å—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π."""

import unittest
from pathlib import Path

from metadata_cleaner.cleaner.errors import (
    MetadataCleanerError,
    FileAccessError,
    UnsupportedFileTypeError,
    MetadataProcessingError,
    BackupError,
    CorruptedFileError,
    EncryptedFileError,
)


class TestMetadataCleanerError(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è MetadataCleanerError."""

    def test_basic_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è."""
        error = MetadataCleanerError("Test error message")
        
        self.assertEqual(str(error), "Test error message")
        self.assertIsInstance(error, Exception)

    def test_empty_message(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Å –ø—É—Å—Ç—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."""
        error = MetadataCleanerError("")
        
        self.assertEqual(str(error), "")

    def test_unicode_message(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Å Unicode —Å–æ–æ–±—â–µ–Ω–∏–µ–º."""
        unicode_message = "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ ÊµãËØï üîí"
        error = MetadataCleanerError(unicode_message)
        
        self.assertEqual(str(error), unicode_message)

    def test_inheritance(self):
        """–¢–µ—Å—Ç –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –æ—Ç Exception."""
        error = MetadataCleanerError("test")
        
        self.assertIsInstance(error, Exception)
        self.assertIsInstance(error, MetadataCleanerError)


class TestFileAccessError(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è FileAccessError."""

    def test_creation_with_file_path(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ—à–∏–±–∫–∏ —Å –ø—É—Ç–µ–º –∫ —Ñ–∞–π–ª—É."""
        file_path = Path("test_file.jpg")
        error = FileAccessError(f"Cannot access file: {file_path}")
        
        self.assertIn("test_file.jpg", str(error))
        self.assertIsInstance(error, MetadataCleanerError)

    def test_file_not_found_scenario(self):
        """–¢–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ñ–∞–π–ª–∞."""
        file_path = Path("nonexistent.jpg")
        error = FileAccessError(f"File not found: {file_path}")
        
        self.assertIn("File not found", str(error))
        self.assertIn("nonexistent.jpg", str(error))

    def test_permission_denied_scenario(self):
        """–¢–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è –æ—Ç–∫–∞–∑–∞ –≤ –¥–æ—Å—Ç—É–ø–µ."""
        file_path = Path("/protected/file.jpg")
        error = FileAccessError(f"Permission denied: {file_path}")
        
        self.assertIn("Permission denied", str(error))
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º str(file_path) –¥–ª—è –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç–∏
        self.assertIn(str(file_path), str(error))

    def test_inheritance(self):
        """–¢–µ—Å—Ç –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è."""
        error = FileAccessError("test")
        
        self.assertIsInstance(error, MetadataCleanerError)
        self.assertIsInstance(error, Exception)


class TestUnsupportedFileTypeError(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è UnsupportedFileTypeError."""

    def test_creation_with_file_extension(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ—à–∏–±–∫–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º —Ñ–∞–π–ª–∞."""
        extension = ".txt"
        error = UnsupportedFileTypeError(f"Unsupported file type: {extension}")
        
        self.assertIn(".txt", str(error))
        self.assertIsInstance(error, MetadataCleanerError)

    def test_unknown_extension_scenario(self):
        """–¢–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è."""
        file_path = Path("file.unknown")
        error = UnsupportedFileTypeError(f"Unknown file extension: {file_path.suffix}")
        
        self.assertIn("Unknown file extension", str(error))
        self.assertIn(".unknown", str(error))

    def test_inheritance(self):
        """–¢–µ—Å—Ç –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è."""
        error = UnsupportedFileTypeError("test")
        
        self.assertIsInstance(error, MetadataCleanerError)
        self.assertIsInstance(error, Exception)


class TestMetadataProcessingError(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è MetadataProcessingError."""

    def test_creation_with_metadata_type(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ—à–∏–±–∫–∏ —Å —Ç–∏–ø–æ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö."""
        error = MetadataProcessingError("Failed to process EXIF data")
        
        self.assertIn("EXIF", str(error))
        self.assertIsInstance(error, MetadataCleanerError)

    def test_inheritance(self):
        """–¢–µ—Å—Ç –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è."""
        error = MetadataProcessingError("test")
        
        self.assertIsInstance(error, MetadataCleanerError)
        self.assertIsInstance(error, Exception)


class TestBackupError(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è BackupError."""

    def test_creation_with_backup_operation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ—à–∏–±–∫–∏ —Å –æ–ø–µ—Ä–∞—Ü–∏–µ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è."""
        error = BackupError("Failed to create backup for file.jpg")
        
        self.assertIn("backup", str(error))
        self.assertIn("file.jpg", str(error))
        self.assertIsInstance(error, MetadataCleanerError)

    def test_inheritance(self):
        """–¢–µ—Å—Ç –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è."""
        error = BackupError("test")
        
        self.assertIsInstance(error, MetadataCleanerError)
        self.assertIsInstance(error, Exception)


class TestCorruptedFileError(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è CorruptedFileError."""

    def test_creation_with_corrupted_file(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ—à–∏–±–∫–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞."""
        error = CorruptedFileError("File appears to be corrupted")
        
        self.assertIn("corrupted", str(error))
        self.assertIsInstance(error, MetadataCleanerError)

    def test_inheritance(self):
        """–¢–µ—Å—Ç –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è."""
        error = CorruptedFileError("test")
        
        self.assertIsInstance(error, MetadataCleanerError)
        self.assertIsInstance(error, Exception)


class TestEncryptedFileError(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è EncryptedFileError."""

    def test_creation_with_encrypted_file(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ—à–∏–±–∫–∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞."""
        error = EncryptedFileError("File is password protected")
        
        self.assertIn("password protected", str(error))
        self.assertIsInstance(error, MetadataCleanerError)

    def test_inheritance(self):
        """–¢–µ—Å—Ç –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è."""
        error = EncryptedFileError("test")
        
        self.assertIsInstance(error, MetadataCleanerError)
        self.assertIsInstance(error, Exception)


class TestErrorsIntegration(unittest.TestCase):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏—Å–∫–ª—é—á–µ–Ω–∏–π."""

    def test_all_errors_are_catchable_by_base(self):
        """–¢–µ—Å—Ç —á—Ç–æ –≤—Å–µ –æ—à–∏–±–∫–∏ –º–æ–∂–Ω–æ –ø–æ–π–º–∞—Ç—å –±–∞–∑–æ–≤—ã–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º."""
        errors = [
            FileAccessError("test"),
            UnsupportedFileTypeError("test"),
            MetadataProcessingError("test"),
            BackupError("test"),
            CorruptedFileError("test"),
            EncryptedFileError("test"),
        ]

        for error in errors:
            with self.subTest(error_type=type(error).__name__):
                try:
                    raise error
                except MetadataCleanerError as caught:
                    self.assertIsInstance(caught, type(error))
                    self.assertEqual(str(caught), "test")

    def test_error_hierarchy(self):
        """–¢–µ—Å—Ç –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π."""
        custom_errors = [
            FileAccessError,
            UnsupportedFileTypeError,
            MetadataProcessingError,
            BackupError,
            CorruptedFileError,
            EncryptedFileError,
        ]

        for error_class in custom_errors:
            with self.subTest(error_class=error_class.__name__):
                self.assertTrue(issubclass(error_class, MetadataCleanerError))
                self.assertTrue(issubclass(error_class, Exception))


if __name__ == "__main__":
    unittest.main()
